<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_EventF10" Id="{cad9348f-c567-4fd3-ada1-86b0e603bb63}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_EventF10
VAR_INPUT
	FB_Bacnet : FB_BACnet_DAIKIN_MasterStation_III_No_3;
    FB_Bacnet_b : FB_BACnet_DAIKIN_MasterStation_III_No_2;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fbMsg : FB_TcMessage;
	aUnits : ARRAY[1..24] OF AC_Unit_Status;
	stUnit   : AC_Unit_Status;
	i: INT;
	sMsgText: STRING;
	
	fbLocalTime : Tc2_Utilities.FB_LocalSystemTime;
    ts         : TIMESTRUCT;
    dtNow      : DT;
	
    fbCsvWriter : Tc2_Utilities.FB_CSVMemBufferWriter;
    csvBuffer   : T_MaxString := ''; // same type used in Beckhoff sample

    fbFileOpen  : Tc2_System.FB_FileOpen;
    fbFilePuts  : Tc2_System.FB_FilePuts;
    fbFileClose : Tc2_System.FB_FileClose;
    hFile       : UINT := 0;
    sCsvPath    : T_MaxString := '';
	
	stepOpen    : BYTE := 0; // internal state for file sequence per event
END_VAR
VAR RETAIN
	aPrevState : ARRAY[1..24] OF BOOL := [FALSE(*24*)];
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// enable and let it sync periodically; call each cycle
fbLocalTime(bEnable := TRUE, dwCycle := 1000); // sync interval 1000 ms
fbLocalTime(); // execute FB
ts := fbLocalTime.systemTime;
dtNow := SYSTEMTIME_TO_DT(ts);
GVL.g_dtNow := dtNow; // optional: expose globally for HMI

aUnits[1].bPresVal := FB_Bacnet.StartStopStatus_064.bPresVal;
aUnits[1].sUnitName := 'F10-A1 (1-00)';
aUnits[2].bPresVal := FB_Bacnet.StartStopStatus_065.bPresVal;
aUnits[2].sUnitName := 'F10-A2 (1-01)';
aUnits[3].bPresVal := FB_Bacnet.StartStopStatus_066.bPresVal;
aUnits[3].sUnitName := 'F10-A3 (1-02)';
aUnits[4].bPresVal := FB_Bacnet.StartStopStatus_067.bPresVal;
aUnits[4].sUnitName := 'F10-A4 (1-03)';
aUnits[5].bPresVal := FB_Bacnet.StartStopStatus_068.bPresVal;
aUnits[5].sUnitName := 'F10-B1 (1-04)';
aUnits[6].bPresVal := FB_Bacnet.StartStopStatus_069.bPresVal;
aUnits[6].sUnitName := 'F10-B2 (1-05)';
aUnits[7].bPresVal := FB_Bacnet.StartStopStatus_070.bPresVal;
aUnits[7].sUnitName := 'F10-C1 (1-06)';
aUnits[8].bPresVal := FB_Bacnet.StartStopStatus_071.bPresVal;
aUnits[8].sUnitName := 'F10-C2 (1-07)';
aUnits[9].bPresVal := FB_Bacnet.StartStopStatus_072.bPresVal;
aUnits[9].sUnitName := 'F10-D1 (1-08)';
aUnits[10].bPresVal := FB_Bacnet.StartStopStatus_073.bPresVal;
aUnits[10].sUnitName := 'F10-D2 (1-09)';
aUnits[11].bPresVal := FB_Bacnet.StartStopStatus_074.bPresVal;
aUnits[11].sUnitName := 'F10-D3 (1-10)';
aUnits[12].bPresVal := FB_Bacnet.StartStopStatus_075.bPresVal;
aUnits[12].sUnitName := 'F10-D4 (1-11)';
aUnits[13].bPresVal := FB_Bacnet.StartStopStatus_076.bPresVal;
aUnits[13].sUnitName := 'F10-D5 (1-12)';
aUnits[14].bPresVal := FB_Bacnet.StartStopStatus_077.bPresVal;
aUnits[14].sUnitName := 'F10-D6 (1-13)';
aUnits[15].bPresVal := FB_Bacnet.StartStopStatus_078.bPresVal;
aUnits[15].sUnitName := 'F10-E1 (1-14)';
aUnits[16].bPresVal := FB_Bacnet.StartStopStatus_079.bPresVal;
aUnits[16].sUnitName := 'F10-E2 (1-15)';
aUnits[17].bPresVal := FB_Bacnet.StartStopStatus_080.bPresVal;
aUnits[17].sUnitName := 'F10-F1 (2-00)';
aUnits[18].bPresVal := FB_Bacnet.StartStopStatus_081.bPresVal;
aUnits[18].sUnitName := 'F10-F2 (2-01)';
aUnits[19].bPresVal := FB_Bacnet.StartStopStatus_082.bPresVal;
aUnits[19].sUnitName := 'F10-G1 (2-02)';
aUnits[20].bPresVal := FB_Bacnet.StartStopStatus_083.bPresVal;
aUnits[20].sUnitName := 'F10-G2 (2-03)';
aUnits[21].bPresVal := FB_Bacnet.StartStopStatus_084.bPresVal;
aUnits[21].sUnitName := 'F10-G3 (2-04)';
aUnits[22].bPresVal := FB_Bacnet.StartStopStatus_112.bPresVal;
aUnits[22].sUnitName := 'F10-IT1 (4-00)';
//aUnits[23].bPresVal := FB_Bacnet.StartStopStatus_241.bPresVal;
//aUnits[23].sUnitName := 'F10-IT2 (4-01)';
aUnits[24].bPresVal := FB_Bacnet.StartStopStatus_226.bPresVal;
aUnits[24].sUnitName := 'F10-Lobi (3-02)';

FOR i := 1 TO 24 DO
	stUnit := aUnits[i]; // extract the structure instance
    IF aUnits[i].bPresVal <> aPrevState[i] THEN
        IF aUnits[i].bPresVal THEN
            sMsgText := CONCAT(stUnit.sUnitName, ' is Turned ON');
        ELSE
            sMsgText := CONCAT(stUnit.sUnitName, ' is Turned OFF');
        END_IF
		
		//send to Eventlogger
		fbMsg.CreateEx(TC_EVENTS.UnitPowerStatus.EventPowerStatus, 0);
		fbMsg.ipArguments.AddString(sMsgText);
		fbMsg.Send(0);
		
		// Add to HMI-visible log
        GVL.aUnitLog[GVL.nLogIndex].sTimestamp := DT_TO_STRING(dtNow);
        GVL.aUnitLog[GVL.nLogIndex].sMessage := sMsgText;
        GVL.nLogIndex := (GVL.nLogIndex + 1) MOD 100; // ring buffer wrap
		
        // --- CSV: build file path for today
        sCsvPath := 'C:\IBMS\Logs\F10_' + DATE_TO_STRING(DT_TO_DATE(dtNow)) + '.csv';

        // --- File open / write / close sequence (text mode) using Beckhoff pattern
        // stepOpen acts like the sample's step variable for each event
        stepOpen := 0;

        // Step 0: start open (rising-edge style)
        IF stepOpen = 0 THEN
            // request open
            fbFileOpen(sNetId := '', sPathName := sCsvPath, nMode := FOPEN_MODEWRITE OR FOPEN_MODETEXT, ePath := PATH_GENERIC, bExecute := TRUE);
            stepOpen := 1;
        END_IF

        // Step 1: wait for open completion
        IF stepOpen = 1 THEN
            // call with execute := FALSE to get outputs as in sample
            fbFileOpen(bExecute := FALSE, bError => fbFileOpen.bError, nErrID => fbFileOpen.nErrID, hFile => fbFileOpen.hFile);
            IF NOT fbFileOpen.bBusy THEN
                IF NOT fbFileOpen.bError THEN
                    hFile := fbFileOpen.hFile;
                    stepOpen := 2;
                ELSE
                    // open failed: set prev state and skip CSV write
                    aPrevState[i] := aUnits[i].bPresVal;
                    stepOpen := 99; // cleanup
                END_IF
            END_IF
        END_IF

        // Step 2: build CSV line into csvBuffer using FB_CSVMemBufferWriter
        IF stepOpen = 2 THEN
            csvBuffer := '';
            fbCsvWriter(pBuffer := ADR(csvBuffer), cbBuffer := SIZEOF(csvBuffer) - 1);

            fbCsvWriter.eCmd := eEnumCmd_First;
            fbCsvWriter.putValue := DT_TO_STRING(dtNow);
            fbCsvWriter.bCRLF := FALSE;
            fbCsvWriter();

            fbCsvWriter.eCmd := eEnumCmd_Next;
            fbCsvWriter.putValue := stUnit.sUnitName;
            fbCsvWriter.bCRLF := FALSE;
            fbCsvWriter();

            fbCsvWriter.eCmd := eEnumCmd_Next;
            IF stUnit.bPresVal THEN
                fbCsvWriter.putValue := 'ON';
            ELSE
                fbCsvWriter.putValue := 'OFF';
            END_IF
            fbCsvWriter.bCRLF := TRUE;
            fbCsvWriter();

            // check writer OK
            IF NOT fbCsvWriter.bOk THEN
                // writer error: close file and skip
                fbFileClose(sNetId := '', hFile := hFile, bExecute := TRUE);
                stepOpen := 99;
            ELSE
                // FB_FilePuts expects that it will add CR; Beckhoff sample removes double CR earlier.
                // We pass csvBuffer as-is (FB_CSVMemBufferWriter appends CRLF when bCRLF=TRUE)
                // Step to write
                fbFilePuts(sNetId := '', hFile := hFile, sLine := csvBuffer, bExecute := TRUE);
                stepOpen := 3;
            END_IF
        END_IF

        // Step 3: wait for FilePuts completion
        IF stepOpen = 3 THEN
            fbFilePuts(bExecute := FALSE, bError => fbFilePuts.bError, nErrID => fbFilePuts.nErrID);
            IF NOT fbFilePuts.bBusy THEN
                // finished writing
                IF fbFilePuts.bError THEN
                    // handle write error if needed
                END_IF
                // close file
                fbFileClose(sNetId := '', hFile := hFile, bExecute := TRUE);
                stepOpen := 4;
            END_IF
        END_IF

        // Step 4: wait for close completion
        IF stepOpen = 4 THEN
            fbFileClose(bExecute := FALSE, bError => fbFileClose.bError, nErrID => fbFileClose.nErrID);
            IF NOT fbFileClose.bBusy THEN
                // closed
                hFile := 0;
                aPrevState[i] := aUnits[i].bPresVal; // only update after successful sequence
                stepOpen := 99;
            END_IF
        END_IF

        // cleanup state (99)
        IF stepOpen = 99 THEN
            // ensure any open attempts are reset (fbFileOpen/puts/close bExecute already cleared by calls above)
            stepOpen := 255; // one-time marker per event; not used further
        END_IF

    END_IF
END_FOR
]]></ST>
    </Implementation>
    <LineIds Name="FB_EventF10">
      <LineId Id="196" Count="4" />
      <LineId Id="9" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="10" Count="5" />
      <LineId Id="53" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="54" Count="1" />
      <LineId Id="21" Count="30" />
      <LineId Id="94" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="101" Count="5" />
      <LineId Id="180" Count="1" />
      <LineId Id="147" Count="2" />
      <LineId Id="239" Count="0" />
      <LineId Id="241" Count="2" />
      <LineId Id="240" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="369" Count="2" />
      <LineId Id="472" Count="97" />
      <LineId Id="460" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>