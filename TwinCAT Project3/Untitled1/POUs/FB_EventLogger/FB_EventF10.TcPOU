<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_EventF10" Id="{cad9348f-c567-4fd3-ada1-86b0e603bb63}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_EventF10
VAR_INPUT
	FB_Bacnet : FB_BACnet_DAIKIN_MasterStation_III_No_3;
    FB_Bacnet_b : FB_BACnet_DAIKIN_MasterStation_III_No_2;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fbMsg : FB_TcMessage;
	aUnits : ARRAY[1..24] OF AC_Unit_Status;
	stUnit   : AC_Unit_Status;
	i: INT;
	sMsgText: STRING;
	
	fbLocalTime : Tc2_Utilities.FB_LocalSystemTime;
    ts         : TIMESTRUCT;
    dtNow      : DT;
	
    fbCsvWriter : Tc2_Utilities.FB_CSVMemBufferWriter;
    csvBuffer   : T_MaxString := ''; // same type used in Beckhoff sample

    fbFileOpen  : Tc2_System.FB_FileOpen;
    fbFilePuts  : Tc2_System.FB_FilePuts;
    fbFileClose : Tc2_System.FB_FileClose;
    hFile       : UINT := 0;
	nFileOpenErrId : UDINT := 0;
	nFileCloseErrId : UDINT := 0;
	nFilePutsErrId: UDINT := 0;
    sCsvPath    : T_MaxString := '';
	
	unitChanged : BOOL := FALSE;
	
	stepOpen    : BYTE := 0; // internal state for file sequence per event
	idxToLog : INT := 0;
END_VAR
VAR RETAIN
	aPrevState : ARRAY[1..24] OF BOOL := [FALSE(*24*)];
	aChangedUnits : ARRAY[1..24] OF BOOL := [FALSE(*24*)];
    nChangedIndex : INT := 1;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// enable and let it sync periodically; call each cycle
fbLocalTime(bEnable := TRUE, dwCycle := 1000); // sync interval 1000 ms
fbLocalTime(); // execute FB
ts := fbLocalTime.systemTime;
dtNow := SYSTEMTIME_TO_DT(ts);
GVL.g_dtNow := dtNow; // optional: expose globally for HMI

aUnits[1].bPresVal := FB_Bacnet.StartStopStatus_064.bPresVal;
aUnits[1].sUnitName := 'F10-A1 (1-00)';
aUnits[2].bPresVal := FB_Bacnet.StartStopStatus_065.bPresVal;
aUnits[2].sUnitName := 'F10-A2 (1-01)';
aUnits[3].bPresVal := FB_Bacnet.StartStopStatus_066.bPresVal;
aUnits[3].sUnitName := 'F10-A3 (1-02)';
aUnits[4].bPresVal := FB_Bacnet.StartStopStatus_067.bPresVal;
aUnits[4].sUnitName := 'F10-A4 (1-03)';
aUnits[5].bPresVal := FB_Bacnet.StartStopStatus_068.bPresVal;
aUnits[5].sUnitName := 'F10-B1 (1-04)';
aUnits[6].bPresVal := FB_Bacnet.StartStopStatus_069.bPresVal;
aUnits[6].sUnitName := 'F10-B2 (1-05)';
aUnits[7].bPresVal := FB_Bacnet.StartStopStatus_070.bPresVal;
aUnits[7].sUnitName := 'F10-C1 (1-06)';
aUnits[8].bPresVal := FB_Bacnet.StartStopStatus_071.bPresVal;
aUnits[8].sUnitName := 'F10-C2 (1-07)';
aUnits[9].bPresVal := FB_Bacnet.StartStopStatus_072.bPresVal;
aUnits[9].sUnitName := 'F10-D1 (1-08)';
aUnits[10].bPresVal := FB_Bacnet.StartStopStatus_073.bPresVal;
aUnits[10].sUnitName := 'F10-D2 (1-09)';
aUnits[11].bPresVal := FB_Bacnet.StartStopStatus_074.bPresVal;
aUnits[11].sUnitName := 'F10-D3 (1-10)';
aUnits[12].bPresVal := FB_Bacnet.StartStopStatus_075.bPresVal;
aUnits[12].sUnitName := 'F10-D4 (1-11)';
aUnits[13].bPresVal := FB_Bacnet.StartStopStatus_076.bPresVal;
aUnits[13].sUnitName := 'F10-D5 (1-12)';
aUnits[14].bPresVal := FB_Bacnet.StartStopStatus_077.bPresVal;
aUnits[14].sUnitName := 'F10-D6 (1-13)';
aUnits[15].bPresVal := FB_Bacnet.StartStopStatus_078.bPresVal;
aUnits[15].sUnitName := 'F10-E1 (1-14)';
aUnits[16].bPresVal := FB_Bacnet.StartStopStatus_079.bPresVal;
aUnits[16].sUnitName := 'F10-E2 (1-15)';
aUnits[17].bPresVal := FB_Bacnet.StartStopStatus_080.bPresVal;
aUnits[17].sUnitName := 'F10-F1 (2-00)';
aUnits[18].bPresVal := FB_Bacnet.StartStopStatus_081.bPresVal;
aUnits[18].sUnitName := 'F10-F2 (2-01)';
aUnits[19].bPresVal := FB_Bacnet.StartStopStatus_082.bPresVal;
aUnits[19].sUnitName := 'F10-G1 (2-02)';
aUnits[20].bPresVal := FB_Bacnet.StartStopStatus_083.bPresVal;
aUnits[20].sUnitName := 'F10-G2 (2-03)';
aUnits[21].bPresVal := FB_Bacnet.StartStopStatus_084.bPresVal;
aUnits[21].sUnitName := 'F10-G3 (2-04)';
aUnits[22].bPresVal := FB_Bacnet.StartStopStatus_112.bPresVal;
aUnits[22].sUnitName := 'F10-IT1 (4-00)';
//aUnits[23].bPresVal := FB_Bacnet.StartStopStatus_241.bPresVal;
//aUnits[23].sUnitName := 'F10-IT2 (4-01)';
aUnits[24].bPresVal := FB_Bacnet.StartStopStatus_226.bPresVal;
aUnits[24].sUnitName := 'F10-Lobi (3-02)';

// --- Detect all changes
FOR i := 1 TO 24 DO
    IF aUnits[i].bPresVal <> aPrevState[i] THEN
        aChangedUnits[i] := TRUE;
    END_IF
END_FOR

// --- Process one change per cycle
FOR i := idxToLog TO 24 DO
    IF aChangedUnits[i] THEN
        stUnit := aUnits[i];
        aChangedUnits[i] := FALSE;
        idxToLog := i + 1;

        // --- Build message
        IF stUnit.bPresVal THEN
            sMsgText := CONCAT(stUnit.sUnitName, ' is Turned ON');
        ELSE
            sMsgText := CONCAT(stUnit.sUnitName, ' is Turned OFF');
        END_IF

        fbMsg.CreateEx(TC_EVENTS.UnitPowerStatus.EventPowerStatus, 0);
        fbMsg.ipArguments.AddString(sMsgText);
        fbMsg.Send(0);

        GVL.aUnitLog[GVL.nLogIndex].sTimestamp := DT_TO_STRING(dtNow);
        GVL.aUnitLog[GVL.nLogIndex].sMessage := sMsgText;
        GVL.nLogIndex := (GVL.nLogIndex + 1) MOD 100;

        sCsvPath := CONCAT('C:\IBMS\Logs\F10_', DATE_TO_STRING(DT_TO_DATE(dtNow)));
        sCsvPath := CONCAT(sCsvPath, '.csv');

        CASE stepOpen OF
            0:
                fbFileOpen(sNetId := '', sPathName := sCsvPath, nMode := FOPEN_MODEWRITE OR FOPEN_MODETEXT, ePath := PATH_GENERIC, bExecute := TRUE);
                stepOpen := 1;

            1:
                fbFileOpen();
                IF NOT fbFileOpen.bBusy THEN
                    fbFileOpen.bExecute := FALSE;
                    IF fbFileOpen.bError THEN
                        nFileOpenErrId := fbFileOpen.nErrId;
                        stepOpen := 99;
                    ELSE
                        hFile := fbFileOpen.hFile;
                        stepOpen := 2;
                    END_IF
                END_IF

            2:
                csvBuffer := '';
                fbCsvWriter(pBuffer := ADR(csvBuffer), cbBuffer := SIZEOF(csvBuffer) - 1);
                fbCsvWriter.eCmd := eEnumCmd_First;
                fbCsvWriter.putValue := DT_TO_STRING(dtNow);
                fbCsvWriter.bCRLF := FALSE;
                fbCsvWriter();

                fbCsvWriter.eCmd := eEnumCmd_Next;
                fbCsvWriter.putValue := stUnit.sUnitName;
                fbCsvWriter.bCRLF := FALSE;
                fbCsvWriter();
				
				fbCsvWriter.eCmd := eEnumCmd_Next;
                IF stUnit.bPresVal THEN
                    fbCsvWriter.putValue := 'ON';
                ELSE
                    fbCsvWriter.putValue := 'OFF';
                END_IF;
                fbCsvWriter.bCRLF := TRUE;
                fbCsvWriter();

                IF fbCsvWriter.bOk THEN
                    stepOpen := 3;
                ELSE
                    stepOpen := 99;
                END_IF

            3: // Write line
                fbFilePuts(sNetId := '', hFile := hFile, sLine := csvBuffer, bExecute := TRUE);
                stepOpen := 4;

            4: // Wait for write
                fbFilePuts();
                IF NOT fbFilePuts.bBusy THEN
                    fbFilePuts.bExecute := FALSE;
                    IF fbFilePuts.bError THEN
                        nFilePutsErrId := fbFilePuts.nErrId;
                    END_IF
                    stepOpen := 5;
                END_IF

            5: // Close file
                fbFileClose(sNetId := '', hFile := hFile, bExecute := TRUE);
                stepOpen := 6;

            6: // Wait for close
                fbFileClose();
                IF NOT fbFileClose.bBusy THEN
                    fbFileClose.bExecute := FALSE;
                    IF fbFileClose.bError THEN
                        nFileCloseErrId := fbFileClose.nErrId;
                    ELSE
                        hFile := 0;
                        aPrevState[i] := stUnit.bPresVal;
                    END_IF
                    stepOpen := 255;
                END_IF

            99: // Error cleanup
                fbFileClose(sNetId := '', hFile := hFile, bExecute := TRUE);
                stepOpen := 6;

            255: // Done
                stepOpen := 0;
        END_CASE

        EXIT; // only process one unit per cycle
    END_IF
END_FOR

// Reset index if all units processed
IF idxToLog > 24 THEN
    idxToLog := 1;
END_IF


]]></ST>
    </Implementation>
    <LineIds Name="FB_EventF10">
      <LineId Id="196" Count="4" />
      <LineId Id="9" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="10" Count="5" />
      <LineId Id="53" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="54" Count="1" />
      <LineId Id="21" Count="30" />
      <LineId Id="94" Count="0" />
      <LineId Id="786" Count="5" />
      <LineId Id="669" Count="0" />
      <LineId Id="792" Count="54" />
      <LineId Id="909" Count="0" />
      <LineId Id="847" Count="61" />
      <LineId Id="772" Count="0" />
      <LineId Id="569" Count="0" />
      <LineId Id="460" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>